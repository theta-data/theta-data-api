{"version":3,"sources":["../node_modules/@graphql-tools/url-loader lazy groupOptions: {} namespace object","../node_modules/@graphql-tools/url-loader sync","CustomArgs.ts","App.tsx","index.tsx"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","webpackEmptyContext","unwrapOutputType","outputType","unwrappedType","isWrappingType","ofType","makeDefaultArg","parentField","arg","type","name","startsWith","endsWith","getDefaultScalarArgValue","argType","kind","value","isEnumType","getValues","map","x","includes","GraphiQLExplorer","defaultValue","fakeStorageObj","fakeStorageInstance","getItem","key","setItem","val","clear","i","Object","removeItem","length","App","defaultQuery","endpoint","urlLoader","UrlLoader","useState","fetcher","setFetcher","schema","setSchema","useEffect","getExecutorAsync","specifiedByUrl","directiveIsRepeatable","schemaDescription","subscriptionsEndpoint","subscriptionsProtocol","SubscriptionProtocol","SSE","executor","introspectSchema","catch","err","console","log","graphQLParams","opts","document","parse","query","operationAst","getOperationAST","operationName","variables","extensions","operationType","operation","undefined","setOperationName","setQuery","setVariables","headers","setHeaders","graphiqlRef","React","useRef","isExplorerOpen","setIsExplorerOpen","className","onEdit","onRunOperation","current","handleRunQuery","explorerIsOpen","onToggleExplorer","ref","headerEditorEnabled","defaultVariableEditorOpen","docExplorerOpen","onEditQuery","onEditVariables","onEditOperationName","onEditHeaders","storage","Logo","Toolbar","Button","onClick","handleToggleHistory","label","title","copyToClipboard","ReactDOM","render","window","body"],"mappings":"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","file":"static/js/main.3af7154f.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 324;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 325;","import GraphiQLExplorer from 'graphiql-explorer';\r\nimport { isEnumType, isWrappingType } from 'graphql';\r\n\r\nimport type {\r\n  GraphQLField,\r\n  GraphQLArgument,\r\n  GraphQLInputField,\r\n  GraphQLEnumType,\r\n  GraphQLOutputType,\r\n  GraphQLScalarType,\r\n  ValueNode,\r\n} from 'graphql';\r\n\r\nfunction unwrapOutputType(outputType: GraphQLOutputType) {\r\n  let unwrappedType = outputType;\r\n  while (isWrappingType(unwrappedType)) {\r\n    unwrappedType = unwrappedType.ofType;\r\n  }\r\n  return unwrappedType;\r\n}\r\n\r\nexport function makeDefaultArg(parentField: GraphQLField<any, any>, arg: GraphQLArgument | GraphQLInputField): boolean {\r\n  const unwrappedType = unwrapOutputType(parentField.type);\r\n  if (\r\n    unwrappedType.name.startsWith('GitHub') &&\r\n    unwrappedType.name.endsWith('Connection') &&\r\n    (arg.name === 'first' || arg.name === 'orderBy')\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function getDefaultScalarArgValue(\r\n  parentField: GraphQLField<any, any>,\r\n  arg: GraphQLArgument | GraphQLInputField,\r\n  argType: GraphQLEnumType | GraphQLScalarType\r\n): ValueNode {\r\n  const unwrappedType = unwrapOutputType(parentField.type);\r\n  switch (unwrappedType.name) {\r\n    case 'GitHubRepository':\r\n      if (arg.name === 'name') {\r\n        return { kind: 'StringValue', value: 'graphql-js' };\r\n      } else if (arg.name === 'owner') {\r\n        return { kind: 'StringValue', value: 'graphql' };\r\n      }\r\n      break;\r\n    case 'NpmPackage':\r\n      if (arg.name === 'name') {\r\n        return { kind: 'StringValue', value: 'graphql' };\r\n      }\r\n      break;\r\n    default:\r\n      if (isEnumType(argType) && unwrappedType.name.startsWith('GitHub') && unwrappedType.name.endsWith('Connection')) {\r\n        if (\r\n          arg.name === 'direction' &&\r\n          argType\r\n            .getValues()\r\n            .map(x => x.name)\r\n            .includes('DESC')\r\n        ) {\r\n          return { kind: 'EnumValue', value: 'DESC' };\r\n        } else if (\r\n          arg.name === 'field' &&\r\n          argType\r\n            .getValues()\r\n            .map(x => x.name)\r\n            .includes('CREATED_AT')\r\n        ) {\r\n          return { kind: 'EnumValue', value: 'CREATED_AT' };\r\n        }\r\n      }\r\n      return GraphiQLExplorer.defaultValue(argType);\r\n  }\r\n  return GraphiQLExplorer.defaultValue(argType);\r\n}\r\n","import copyToClipboard from 'copy-to-clipboard'\nimport { getOperationAST, GraphQLSchema, parse } from 'graphql'\nimport GraphiQL, { Fetcher, FetcherResult } from 'graphiql'\nimport React, { useEffect, useState } from 'react'\nimport { SubscriptionProtocol, UrlLoader } from '@graphql-tools/url-loader'\nimport { introspectSchema } from '@graphql-tools/wrap'\n// @ts-ignore\nimport { makeDefaultArg, getDefaultScalarArgValue } from './CustomArgs'\n// @ts-ignore\nimport GraphiQLExplorer from 'graphiql-explorer'\nimport 'graphiql/graphiql.css'\nimport './App.css'\n\nlet fakeStorageObj: any = {}\nconst fakeStorageInstance: Storage = {\n  getItem(key) {\n    return fakeStorageObj[key]\n  },\n  setItem(key, val) {\n    fakeStorageObj[key] = val\n  },\n  clear() {\n    fakeStorageObj = {}\n  },\n  key(i) {\n    return Object.keys(fakeStorageObj)[i]\n  },\n  removeItem(key) {\n    // @ts-ignore\n    delete fakeStorageObj[key]\n  },\n  get length() {\n    return Object.keys(fakeStorageObj).length\n  }\n}\n\nconst App: React.FC<{ defaultQuery: string; endpoint: string }> = ({\n  defaultQuery = '',\n  endpoint\n}) => {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const urlLoader = new UrlLoader()\n  const [fetcher, setFetcher] = useState<Fetcher | null>(null)\n  const [schema, setSchema] = useState<GraphQLSchema | null>(null)\n  useEffect(() => {\n    urlLoader\n      .getExecutorAsync(endpoint, {\n        specifiedByUrl: true,\n        directiveIsRepeatable: true,\n        schemaDescription: true,\n        subscriptionsEndpoint: endpoint,\n        subscriptionsProtocol: SubscriptionProtocol.SSE\n      })\n      .then((executor) => {\n        introspectSchema(\n          executor,\n          {},\n          {\n            specifiedByUrl: true,\n            directiveIsRepeatable: true,\n            schemaDescription: true\n          }\n        )\n          .then((schema) => setSchema(schema))\n          .catch((err) => {\n            console.log(err)\n          })\n\n        // @ts-ignore\n        setFetcher(() => (graphQLParams: any, opts: any) => {\n          const document = parse(graphQLParams.query)\n          const operationAst = getOperationAST(document, graphQLParams.operationName)\n          if (!operationAst) {\n            throw new Error(`Operation ${graphQLParams.operationName} cannot be found!`)\n          }\n          try {\n            return executor({\n              document: parse(graphQLParams.query),\n              variables: graphQLParams.variables,\n              extensions: opts,\n              operationName: graphQLParams.operationName,\n              operationType: operationAst.operation\n            }) as FetcherResult\n          } catch (e) {\n            console.log(e)\n          }\n        })\n      })\n  }, [])\n\n  const [operationName, setOperationName] = useState<string | undefined>(undefined)\n  const [query, setQuery] = useState<string | undefined>(defaultQuery)\n  const [variables, setVariables] = useState('{}')\n  const [headers, setHeaders] = useState('{}')\n\n  const graphiqlRef = React.useRef<GraphiQL | null>(null)\n\n  const [isExplorerOpen, setIsExplorerOpen] = useState(true)\n\n  return (\n    schema &&\n    fetcher && (\n      <div className='graphiql-container'>\n        <GraphiQLExplorer\n          schema={schema}\n          query={query}\n          onEdit={(query: any) => setQuery(query)}\n          onRunOperation={(operationName: any) =>\n            graphiqlRef.current?.handleRunQuery(operationName)\n          }\n          explorerIsOpen={isExplorerOpen}\n          onToggleExplorer={() => setIsExplorerOpen(!isExplorerOpen)}\n          getDefaultScalarArgValue={getDefaultScalarArgValue}\n          makeDefaultArg={makeDefaultArg}\n        />\n        <GraphiQL\n          ref={graphiqlRef}\n          headerEditorEnabled={true}\n          defaultVariableEditorOpen={false}\n          docExplorerOpen={false}\n          fetcher={fetcher}\n          query={query}\n          onEditQuery={(query) => setQuery(query)}\n          variables={variables}\n          onEditVariables={(variables) => setVariables(variables)}\n          operationName={operationName}\n          onEditOperationName={(operationName) => setOperationName(operationName)}\n          headers={headers}\n          onEditHeaders={(headers) => setHeaders(headers)}\n          storage={fakeStorageInstance}\n        >\n          <GraphiQL.Logo>Graphql</GraphiQL.Logo>\n          <GraphiQL.Toolbar>\n            {/*<GraphiQL.Button*/}\n            {/*  onClick={() => graphiqlRef.current?.handlePrettifyQuery()}*/}\n            {/*  label='Prettify'*/}\n            {/*  title='Prettify Query (Shift-Ctrl-P)'*/}\n            {/*/>*/}\n            <GraphiQL.Button\n              onClick={() => graphiqlRef.current?.handleToggleHistory()}\n              label='History'\n              title='Show History'\n            />\n            <GraphiQL.Button\n              onClick={() => setIsExplorerOpen(!isExplorerOpen)}\n              label='Explorer'\n              title='Toggle Explorer'\n            />\n            <GraphiQL.Button\n              onClick={() => copyToClipboard(query!)}\n              label='Copy Operation'\n              title='Copy Operation'\n            />\n          </GraphiQL.Toolbar>\n        </GraphiQL>\n      </div>\n    )\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <App\n    defaultQuery={(window as any).defaultQuery}\n    // endpoint={(window as any).endpoint}\n    endpoint='/graphql/'\n  />,\n  document.body\n)\n"],"sourceRoot":""}