# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ThetaTxNumByHoursEntity {
  year: Int!
  month: Int!
  date: Int!
  hour: Int!
  block_number: Int!
  theta_fuel_burnt: Float!
  active_wallet: Int!
  coin_base_transaction: Int!
  slash_transaction: Int!
  send_transaction: Int!
  reserve_fund_transaction: Int!
  release_fund_transaction: Int!
  service_payment_transaction: Int!
  split_rule_transaction: Int!
  deposit_stake_transaction: Int!
  withdraw_stake_transaction: Int!
  smart_contract_transaction: Int!
  latest_block_height: Int!
  timestamp: String!
}

type ThetaTransactionStatisticsType {
  by_date: [ThetaTxNumByDateModel!]!
  by_hour: [ThetaTxNumByHoursEntity!]!
}

type ThetaTxNumByDateModel {
  year: Int!
  month: Int!
  date: Int!
  block_number: Int!
  theta_fuel_burnt: Float!
  active_wallet: Int!
  coin_base_transaction: Int!
  slash_transaction: Int!
  send_transaction: Int!
  reserve_fund_transaction: Int!
  release_fund_transaction: Int!
  service_payment_transaction: Int!
  split_rule_transaction: Int!
  deposit_stake_transaction: Int!
  withdraw_stake_transaction: Int!
  smart_contract_transaction: Int!
  latest_block_height: Int!
  timestamp: String!
}

type Stake {
  source: String!
  amount: String!
  withdrawn: Boolean!
  return_height: String!
}

type StakeStatisticsEntity {
  block_height: Int!
  total_elite_edge_node_number: Int!
  total_edge_node_stake_amount: String!
  total_guardian_node_number: Int!
  effective_guardian_node_number: Int!
  total_guardian_stake_amount: String!
  effective_guardian_stake_amount: String!
  total_validator_node_number: Int!
  effective_validator_node_number: Int!
  total_validator_stake_amount: String!
  effective_validator_stake_amount: String!
  theta_fuel_stake_ratio: Float!
  theta_stake_ratio: Float!
  timestamp: Int!
}

type TokenMarketInformationType {
  name: String!
  price: Float!
  volume_24h: Float!
  market_cap: Float!
  total_supply: Float!
  circulating_supply: Float!
  last_updated: String!
}

type MarketInformationType {
  theta: TokenMarketInformationType!
  theta_fuel: TokenMarketInformationType!
}

type CandidateStakeTyep {
  source: String!
  amount: String!
  withdrawn: Boolean!
  return_height: String!
}

type CandidateType {
  Holder: String!
  Stakes: [CandidateStakeTyep!]!
}

type VcpPairType {
  BlockHash: String
  SortedCandidates: [CandidateType!]!
}

type HeightListType {
  Heights: [Int!]!
}

type BlockHashVcpPair {
  BlockHash: String!
  Vcp: VcpPairType!
  HeightList: HeightListType!
}

type GetVcpByHeightModel {
  BlockHashVcpPairs: [BlockHashVcpPair!]!
}

type GcpType {
  SortedGuardians: [CandidateType!]!
}

type BlockHashGcpPairType {
  BlockHash: String!
  Gcp: GcpType!
  HeightList: HeightListType
}

type GetGcpByHeightModel {
  BlockHashGcpPairs: [BlockHashGcpPairType!]!
}

type BlockHashEenpPairType {
  BlockHash: String!
  EENs: [CandidateType!]!
  HeightList: HeightListType
}

type GetEenpByHeightModel {
  BlockHashEenpPairs: [BlockHashEenpPairType!]!
}

type StakeRewardDistributionRuleType {
  Beneficiary: String!
  SplitBasisPoint: String!
  StakeHolder: String!
}

type StakeRewardDistributionRuleSetType {
  BlockHash: String!
  StakeRewardDistributionRuleSet: [StakeRewardDistributionRuleType!]!
}

type BlockHashStakeRewardDistributionRuleSetPairsModel {
  BlockHashStakeRewardDistributionRuleSetPairs: [StakeRewardDistributionRuleSetType!]!
}

"""
This API returns the version of the blockchain software.


"""
type GetVersionModel {
  version: String!
  git_hash: String!
  timestamp: String!
}

type TokenType {
  thetawei: String!
  tfuelwei: String!
}

type receiptType {
  TxHash: String!
  Logs: [receiptLogType!]
  EvmRet: String
  ContractAddress: String!
  GasUsed: Int!
  EvmErr: String
}

type receiptLogType {
  address: String!
  topics: [String!]!
  data: String
}

type GetAccountModel {
  sequence: String!
  coins: TokenType!
  reserved_funds: [String!]!
  last_updated_block_height: String!
  root: String!
  code: String!
}

type HccVoteType {
  Block: String!
  Height: Int!
  Epoch: Int!
  ID: String!
  Signature: String!
}

type HccType {
  Votes: [HccVoteType!]!
  BlockHash: String!
}

type GuardianVotesType {
  Block: String!
  Gcp: String!
  Multiplies: [Int!]!
}

type EliteEdgeNodeVotesType {
  Block: String!
  Multiplies: [Int!]!
  Addresses: [String!]!
}

type BlockModel {
  chain_id: String!
  epoch: String!
  height: String!
  parent: String!
  transactions_hash: String!
  state_hash: String!
  timestamp: String!
  proposer: String!
  children: [String!]!
  status: THETA_BLOCK_STATUS_ENUM!
  hash: String!
  transactions: [transactionType!]!
  hcc: HccType
  guardian_votes: GuardianVotesType
  elite_edge_node_votes: EliteEdgeNodeVotesType
}

enum THETA_BLOCK_STATUS_ENUM {
  pending
  valid
  invalid
  committed
  directly_finalized
  indirectly_finalized
  trusted
}

type proposerType {
  address: String
  coins: TokenType
  sequence: String
  signature: String
}

type inputOutputType {
  address: String!
  coins: TokenType!
}

type transactionRawType {
  proposer: proposerType
  outputs: [inputOutputType]
  inputs: [inputOutputType]
  gas_limit: String
  gas_price: String
  from: proposerType
  to: proposerType
  data: String
  block_height: String
}

type transactionType {
  raw: transactionRawType
  type: THETA_TX_TYPE_ENUM!
  fee: TokenType
  hash: String!
  receipt: receiptType
}

enum THETA_TX_TYPE_ENUM {
  TxCoinbase
  TxSlash
  TxSend
  TxReserveFund
  TxReleaseFund
  TxServicePayment
  TxSplitRule
  TxSmartContract
  TxDepositStake
  TxWithdrawStake
  TxDepositStakeV2
  TxStakeRewardDistribution
}

type GetTransactionModel {
  block_hash: String!
  block_height: String!
  type: THETA_TX_TYPE_ENUM!
  status: String!
  hash: String!
  transaction: transactionRawType!
  receipt: receiptType
}

type NodeStatusModel {
  address: String!
  chain_id: String!
  peer_id: String!
  latest_finalized_block_hash: String!
  latest_finalized_block_height: String!
  latest_finalized_block_time: String!
  latest_finalized_block_epoch: String!
  current_epoch: String!
  current_height: String!
  current_time: String!
  syncing: Boolean!
  genesis_block_hash: String!
}

type GetPendingTransactionsModel {
  tx_hashes: [String!]!
}

type ThetaRpcModel {
  GetVersion: GetVersionModel!
  GetAccount(address: String!): GetAccountModel!
  GetBlock(hash: String!): BlockModel!
  GetBlockByHeight(height: Int!): BlockModel!
  GetStatus: NodeStatusModel!
  GetTransaction(hash: String!): GetTransactionModel!
  GetVcpByHeight(height: Int): GetVcpByHeightModel!
  GetGcpByHeight(height: Int): GetGcpByHeightModel!
  GetEenpByHeight(height: Int): GetEenpByHeightModel!
  GetPendingTransactions: GetPendingTransactionsModel!
  GetStakeRewardDistributionByHeight(height: Int!): BlockHashStakeRewardDistributionRuleSetPairsModel!
}

type SmartContractCallRecordEntity {
  timestamp: Float!
}

type SmartContractEntity {
  contract_address: String!
  call_times: Int!
  last_seven_days_call_times: Int!
  last_24h_call_times: Int!
  record: [SmartContractCallRecordEntity!]!
}

type SmartContractStatisticsType {
  call_rank(take: Int = 500, rank_by: RankByEnum): [SmartContractEntity!]!
}

enum RankByEnum {
  call_times
  last_24h_call_times
  last_seven_days_call_times
}

type WalletModel {
  balance(wallet_address: String!): BalanceModel!
}

type FiatCurrencyType {
  usd: Float!
  cny: Float!
  eur: Float!
}

type TokenBalanceType {
  amount: Float!
  fiat_currency_value: FiatCurrencyType!
}

type StakeBalanceType {
  node_address: String!
  amount: Float!
  withdrawn: Boolean!
  return_height: String!
  fiat_currency_value: FiatCurrencyType!
}

type TotalBalanceType {
  theta_amount: Float!
  theta_fuel_amount: Float!
  fiat_currency_value: FiatCurrencyType!
}

type BalanceModel {
  theta: TokenBalanceType!
  theta_fuel: TokenBalanceType!
  stake_to_guardian: [StakeBalanceType!]
  stake_to_elite_node: [StakeBalanceType!]
  stake_to_validator_node: [StakeBalanceType!]
  total: TotalBalanceType!
}

type Query {
  TransactionsStatistics: ThetaTransactionStatisticsType!
  StakeStatistics: StakeStatisticsEntity!
  MarketInformation: MarketInformationType!
  ThetaRpc: ThetaRpcModel!
  SmartContractStatistics: SmartContractStatisticsType!
  Wallet: WalletModel!
}
