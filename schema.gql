# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ThetaTxNumByHoursEntity {
  year: Int!
  month: Int!
  date: Int!
  hour: Int!
  block_number: Int!
  theta_fuel_burnt: Float!
  theta_fuel_burnt_by_smart_contract: Float!
  theta_fuel_burnt_by_transfers: Float!
  active_wallet: Int!
  coin_base_transaction: Int!
  slash_transaction: Int!
  send_transaction: Int!
  reserve_fund_transaction: Int!
  release_fund_transaction: Int!
  service_payment_transaction: Int!
  split_rule_transaction: Int!
  deposit_stake_transaction: Int!
  withdraw_stake_transaction: Int!
  smart_contract_transaction: Int!
  latest_block_height: Int!
  timestamp: String!
}

type ThetaTransactionStatisticsType {
  ByDate(
    """
    the timezone difference in minutes, between the UTC and the current local time.Such as PDT time is utc-07, should pass -420
    """
    timezoneOffset: Int = 0
  ): [ThetaTxNumByDateModel!]!
  ByHour(
    """
    the timezone difference in minutes, between the UTC and the current local time.Such as PDT time is utc-07, should pass -420
    """
    timezoneOffset: Int = 0
  ): [ThetaTxNumByHoursEntity!]!
}

type ThetaTxNumByDateModel {
  year: Int!
  month: Int!
  date: Int!
  block_number: Int!
  theta_fuel_burnt: Float!
  theta_fuel_burnt_by_smart_contract: Float!
  theta_fuel_burnt_by_transfers: Float!
  active_wallet: Int!
  coin_base_transaction: Int!
  slash_transaction: Int!
  send_transaction: Int!
  reserve_fund_transaction: Int!
  release_fund_transaction: Int!
  service_payment_transaction: Int!
  split_rule_transaction: Int!
  deposit_stake_transaction: Int!
  withdraw_stake_transaction: Int!
  smart_contract_transaction: Int!
  latest_block_height: Int!
  timestamp: Int!
}

type WalletModel {
  Balance(wallet_address: String!): BalanceModel!
}

type FiatCurrencyType {
  usd: Float!
  cny: Float!
  eur: Float!
}

type TokenBalanceType {
  amount: Float!
  fiat_currency_value: FiatCurrencyType!
}

type StakeBalanceType {
  node_address: String!
  amount: Float!
  withdrawn: Boolean!
  return_height: String!
  fiat_currency_value: FiatCurrencyType!
}

type TotalBalanceType {
  theta_amount: Float!
  theta_fuel_amount: Float!
  fiat_currency_value: FiatCurrencyType!
}

type BalanceModel {
  theta: TokenBalanceType!
  theta_fuel: TokenBalanceType!
  stake_to_guardian: [StakeBalanceType!]
  stake_to_elite_node: [StakeBalanceType!]
  stake_to_validator_node: [StakeBalanceType!]
  total: TotalBalanceType!
}

type Stake {
  source: String!
  amount: String!
  withdrawn: Boolean!
  return_height: String!
}

"""Return to statistics related to token pledges"""
type StakeStatisticsEntity {
  """Height of the block where pledge statistics are performed """
  block_height: Int!

  """Total number of elite edge nodes"""
  total_elite_edge_node_number: Int!

  """Number of theta fuel pledged to elite edge nodes"""
  total_edge_node_stake_amount: String!

  """Total number of guardian nodes"""
  total_guardian_node_number: Int!

  """Number of online guardian nodes"""
  effective_guardian_node_number: Int!

  """Total number of theta tokens pledged to the guardian nodes"""
  total_guardian_stake_amount: String!

  """Total number of theta pledges for the online guardian nodes"""
  effective_guardian_stake_amount: String!

  """Total number of validator nodes"""
  total_validator_node_number: Int!

  """Number of online validator nodes"""
  effective_validator_node_number: Int!

  """otal number of theta tokens pledged to the validator nodes"""
  total_validator_stake_amount: String!

  """The number of tokens pledged by the online validator nodes"""
  effective_validator_stake_amount: String!

  """Theta Fuel pledge ratio"""
  theta_fuel_stake_ratio: Float!

  """Theta pledge ratio"""
  theta_stake_ratio: Float!

  """Block time for performing pledge statistics"""
  timestamp: Int!
  stake_reward(wallet_address: String!): StakeRewardModel
}

type StakeRewardModel {
  last_24_hour: TokenBalanceType
  last_3_days: TokenBalanceType
  last_7_days: TokenBalanceType
}

type TokenMarketInformationType {
  name: String!
  price: Float!
  volume_24h: Float!
  market_cap: Float!
  total_supply: Float!
  circulating_supply: Float!
  last_updated: String!
}

type MarketInformationType {
  Theta: TokenMarketInformationType!
  ThetaFuel: TokenMarketInformationType!
}

type CandidateStakeType {
  source: String!
  amount: String!
  withdrawn: Boolean!
  return_height: String!
}

type CandidateType {
  Holder: String!
  Stakes: [CandidateStakeType!]!
}

type VcpPairType {
  BlockHash: String
  SortedCandidates: [CandidateType!]!
}

type HeightListType {
  Heights: [Int!]!
}

type BlockHashVcpPair {
  BlockHash: String!
  Vcp: VcpPairType!
  HeightList: HeightListType!
}

type GetVcpByHeightModel {
  BlockHashVcpPairs: [BlockHashVcpPair!]!
}

type GcpType {
  SortedGuardians: [CandidateType!]!
}

type BlockHashGcpPairType {
  BlockHash: String!
  Gcp: GcpType!
  HeightList: HeightListType
}

type GetGcpByHeightModel {
  BlockHashGcpPairs: [BlockHashGcpPairType!]!
}

type BlockHashEenpPairType {
  BlockHash: String!
  EENs: [CandidateType!]!
  HeightList: HeightListType
}

type GetEenpByHeightModel {
  BlockHashEenpPairs: [BlockHashEenpPairType!]!
}

type StakeRewardDistributionRuleType {
  Beneficiary: String!
  SplitBasisPoint: String!
  StakeHolder: String!
}

type StakeRewardDistributionRuleSetType {
  BlockHash: String!
  StakeRewardDistributionRuleSet: [StakeRewardDistributionRuleType!]!
}

type BlockHashStakeRewardDistributionRuleSetPairsModel {
  BlockHashStakeRewardDistributionRuleSetPairs: [StakeRewardDistributionRuleSetType!]!
}

type GetVersionModel {
  """the version number"""
  version: String!

  """the git commit hash of the code base"""
  git_hash: String!

  """the build timestamp"""
  timestamp: String!
}

type TokenType {
  thetawei: String!
  tfuelwei: String!
}

type receiptType {
  TxHash: String!
  Logs: [receiptLogType!]
  EvmRet: String
  ContractAddress: String!
  GasUsed: Int!
  EvmErr: String
}

type receiptLogType {
  address: String!
  topics: [String!]!
  data: String
}

type GetAccountModel {
  """ the current sequence number of the account"""
  sequence: String!

  """the native token balance"""
  coins: TokenType!

  """
  fund reserved for micropayment through the off-chain resource-oriented payment pool
  """
  reserved_funds: [String!]!

  """"""
  last_updated_block_height: String!

  """
  the root hash of the data Merkle-Patricia trie (for smart contract accounts)
  """
  root: String!

  """the hash of the smart contract bytecode (for smart contract accounts)"""
  code: String!
}

type HccVoteType {
  Block: String!
  Height: Int!
  Epoch: Int!
  ID: String!
  Signature: String!
}

type HccType {
  Votes: [HccVoteType!]!
  BlockHash: String!
}

type GuardianVotesType {
  Block: String!
  Gcp: String!
  Multiplies: [Int!]!
}

type EliteEdgeNodeVotesType {
  Block: String!
  Multiplies: [Int!]!
  Addresses: [String!]!
}

type BlockModel {
  """ID of the chain"""
  chain_id: String!

  """epoch of the block"""
  epoch: String!

  """height of the block"""
  height: String!

  """hash of the parent block"""
  parent: String!

  """root hash of the transaction Merkle-Patricia trie"""
  transactions_hash: String!

  """root hash of the state Merkle-Patricia trie"""
  state_hash: String!

  """timestamp when the block was proposed"""
  timestamp: String!

  """address of the proposer validator"""
  proposer: String!

  """children blocks"""
  children: [String!]!

  """status of the block"""
  status: THETA_BLOCK_STATUS_ENUM!

  """hash of the transaction"""
  hash: String!

  """ json representation of the transactions contained in the block"""
  transactions: [transactionType!]!
  hcc: HccType
  guardian_votes: GuardianVotesType
  elite_edge_node_votes: EliteEdgeNodeVotesType
}

enum THETA_BLOCK_STATUS_ENUM {
  pending
  valid
  invalid
  committed
  directly_finalized
  indirectly_finalized
  trusted
}

type proposerType {
  address: String
  coins: TokenType
  sequence: String
  signature: String
}

type inputOutputType {
  address: String!
  coins: TokenType!
}

type transactionRawType {
  proposer: proposerType
  fee: TokenType
  outputs: [inputOutputType]
  inputs: [inputOutputType]
  gas_limit: String
  gas_price: String
  from: proposerType
  to: proposerType
  data: String
  block_height: String
}

type transactionType {
  raw: transactionRawType
  type: THETA_TX_TYPE_ENUM!
  hash: String!
  receipt: receiptType
}

enum THETA_TX_TYPE_ENUM {
  TxCoinbase
  TxSlash
  TxSend
  TxReserveFund
  TxReleaseFund
  TxServicePayment
  TxSplitRule
  TxSmartContract
  TxDepositStake
  TxWithdrawStake
  TxDepositStakeV2
  TxStakeRewardDistribution
}

type GetTransactionModel {
  block_hash: String!
  block_height: String!
  type: THETA_TX_TYPE_ENUM!
  status: String!
  hash: String!
  transaction: transactionRawType!
  receipt: receiptType
}

type NodeStatusModel {
  address: String!
  chain_id: String!
  peer_id: String!
  latest_finalized_block_hash: String!
  latest_finalized_block_height: String!
  latest_finalized_block_time: String!
  latest_finalized_block_epoch: String!
  current_epoch: String!
  current_height: String!
  current_time: String!
  syncing: Boolean!
  genesis_block_hash: String!
}

type GetPendingTransactionsModel {
  tx_hashes: [String!]!
}

type ThetaRpcModel {
  """This field returns the version of the blockchain software."""
  GetVersion: GetVersionModel!

  "This Field returns the details of the account.\n\n"
  GetAccount(address: String!): GetAccountModel!

  """This Field returns the details of the block"""
  GetBlock(hash: String!): BlockModel!

  """
  This Field returns the finalized block given the height.
  If none of the blocks at the given height are finalized (either directly or indirectly), 
  then returns an empty result.
  """
  GetBlockByHeight(height: Int!): BlockModel!

  """This field return the status of the guardian node run by theta data"""
  GetStatus: NodeStatusModel!

  """This field returns the detail of the transaction by hash."""
  GetTransaction(hash: String!): GetTransactionModel!
  GetVcpByHeight(height: Int): GetVcpByHeightModel!
  GetGcpByHeight(height: Int): GetGcpByHeightModel!
  GetEenpByHeight(height: Int): GetEenpByHeightModel!

  """This field returns the pending transactions in the mempool."""
  GetPendingTransactions: GetPendingTransactionsModel!
  GetStakeRewardDistributionByHeight(height: Int): BlockHashStakeRewardDistributionRuleSetPairsModel!
}

type SmartContractEntity {
  """Address of the smart contract"""
  contract_address: String!
  verified: Boolean!
  protocol: Int!
  abi: String
  source_code: String
  byte_code: String
  verification_date: Int!
  compiler_version: String
  optimizer: String
  optimizerRuns: Int!
  name: String
  function_hash: String
  constructor_arguments: String

  """Total number of smart contract calls"""
  call_times: Int!

  """Number of smart contract calls in the last 7 days"""
  last_seven_days_call_times: Int!

  """Number of smart contract calls in the last 24 hours"""
  last_24h_call_times: Int!

  """call times update timestamp"""
  call_times_update_timestamp: Int!
}

"""Statistics on smart contract related calls"""
type SmartContractStatisticsType {
  CallRank(rank_by: RankByEnum, take: Int = 500): [SmartContractEntity!]!
}

enum RankByEnum {
  call_times
  last_24h_call_times
  last_seven_days_call_times
}

type UpdateRecordType {
  affected_rows: Int!
}

type SmartContractScType {
  address: String!
  abi: String!
  source_code: String!
  verification_date: String!
  compiler_version: String!
  optimizer: String!
  optimizerRuns: Float!
  name: String!
  function_hash: String!
  constructor_arguments: String!
}

type NftBalanceEntity {
  smart_contract_address: String!
  owner: String!
  from: String!
  contract_uri: String!
  base_token_uri: String!
  token_uri: String!
  name: String!
  img_uri: String!
  detail: String!
  token_id: Int!
}

type NftTransferRecordEntity {
  smart_contract_address: String!
  from: String!
  to: String!
  token_id: Int!
  height: Int!
  timestamp: Int!
}

type NftType {
  Balance(wallet_address: String!): [NftBalanceEntity!]!
  NftsForContract(wallet_address: String!, smart_contract_address: String!): [NftBalanceEntity!]!
  NftTransfers(wallet_address: String!): [NftTransferRecordEntity!]!
  NftTransfersByBlock(block_height: Int!): [NftTransferRecordEntity!]!
  NftOwners(smart_contract_address: String!): [NftBalanceEntity!]!
  ContractNftTransfers(smart_contract_address: String!): [NftTransferRecordEntity!]!
  TokenIdOwners(token_id: Float!, contract_adress: String!): NftBalanceEntity!
  Meta(smart_contract_address: String!): NftMetaType!
}

type NftMetaType {
  unique_holder: Int!
  total: Float!
}

type ContactEntity {
  first_name: String!
  last_name: String!
  email: String!
  content: String!
}

type Query {
  """Return to statistics related to token pledges"""
  StakeStatistics: StakeStatisticsEntity
  Wallet: WalletModel!
  MarketInformation: MarketInformationType!
  SmartContractStatistics: SmartContractStatisticsType!
  Nfts: NftType!
  TransactionsStatistics: ThetaTransactionStatisticsType!
  ThetaRpc: ThetaRpcModel!
}

type Mutation {
  verifyWithThetaExplorer(address: String!): SmartContractEntity!
  updateRecord(address: String!): UpdateRecordType!
  newMsg(first_name: String!, last_name: String!, email: String!, content: String!): ContactEntity!
}